@startuml

title Vajolet classes

skinparam class {
	BackgroundColor<<Unit_Tested>> PaleGreen
	ArrowColor<<Unit_Tested>> SeaGreen
	BorderColor<<Unit_Tested>> SpringGreen
	BorderColor<<Func_Tested>> DarkRed
	BackgroundColor<<Func_Tested>> Salmon
}

note "Green classes are unit Tested\nRed border classes are functionaly functionally Tested" as N1


'------------------------
'book file
'------------------------
interface PolyglotBook <<Unit_Tested>>{
  +Move probe(const Position& pos, bool pickBest);
  -PolyglotBook::impl pimpl;
}

class PolyglotBook::impl <<Unit_Tested>>{
  +Move probe(const Position& pos, bool pickBest);
}

PolyglotBook o-- PolyglotBook::impl
PolyglotBook::impl *-- MovePicker
PolyglotBook::impl o-- PolyglotKey

'------------------------
'command file
'------------------------
interface UciManager {
  +{static} UciManager& getInstance()
  +void uciLoop(void);
  -UciManager();
  
  -UciManager::impl pimpl;
}

class UciManager::impl {
  -Position Pos
  +void uciLoop()
  -std::list<std::unique_ptr<UciOption>> _optionList
}

UciManager o-- UciManager::impl
UciManager::impl *-- Position
UciManager::impl o-- my_thread

UciManager::impl o-- "many" UciOption

UciManager::impl *-- Perft
UciManager::impl *-- MovePicker

abstract UciOutput {
  +{static} std::unique_ptr<UciOutput> create( const UciOutput::type t  = UciOutput::standard );
}

class UciMuteOutput {
}

class UciStandardOutput {
}

UciOutput <|-- UciStandardOutput
UciOutput <|-- UciMuteOutput

abstract UciOption {
  +bool setValue( std::string v, bool verbose = true);
  +std::string print() const;
}

class StringUciOption {
}
class SpinUciOption {
}
class CheckUciOption {
}
class ButtonUciOption { 
}

UciOption <|-- StringUciOption
UciOption <|-- SpinUciOption
UciOption <|-- CheckUciOption
UciOption <|-- ButtonUciOption


'------------------------
'game file
'------------------------

class GamePosition {
  +HashKey key;
  +Move m;
  +PVline PV;
  +Score alpha;
  +Score beta;
  +unsigned int depth;
}

GamePosition *-- HashKey
GamePosition *-- Move
GamePosition *-- PVline

class Game {
  -std::vector<GamePosition> _positions;
}

Game o-- "many" GamePosition

'------------------------
'hashkey file
'------------------------

class HashKey <<Unit_Tested>>{
}

'------------------------
'history file
'------------------------

class History <<Unit_Tested>>{
  +void clear();
  +void update(...);
  +Score getValue(...);
}

class CaptureHistory <<Func_Tested>>{
  +void clear();
  +void update(...);
  +Score getValue(...);
}

class CounterMove <<Func_Tested>>{
  +void clear();
  +void update(...);
  +Move getValue(...);
}

CounterMove *-- Move

'------------------------
'Move file
'------------------------

class Move <<Unit_Tested>>{
}

class extMove <<Unit_Tested>>{
  +setScore()
}

Move <|-- extMove

'------------------------
'Movegen file
'------------------------
class Movegen <<Func_Tested>>{
  +template<Movegen::genType type>	void generateMoves( MoveList<MAX_MOVE_PER_POSITION>& ml)const;
  -const Position &_pos;
}

Movegen *-- MoveList
Movegen o-- Position
Movegen o-- Move

'------------------------
'MoveList file
'------------------------
class MoveList <<Unit_Tested>>{
  -std::array< extMove, N > _ml;
  +const Move& getNextMove(void);
}

MoveList *-- extMove
MoveList o-- Move

'------------------------
'MovePicker file
'------------------------
class MovePicker <<Func_Tested>>{
  -MoveList<MAX_MOVE_PER_POSITION> _moveList;
  -MoveList<MAX_BAD_MOVE_PER_POSITION> _badCaptureList;
  -const Position& _pos;
  -const Movegen& _mg;
  -const SearchData& _sd;
  
  -Move _ttMove;
  -Move _killerMoves[2];
  -Move _counterMoves[2];
}

MovePicker *-- "2" MoveList
MovePicker o-- Position
MovePicker o-- Movegen
MovePicker o-- SearchData
MovePicker *-- "many" Move

'------------------------
'MultiPVManager file
'------------------------

class MultiPVManager <<Unit_Tested>>{
  -std::vector<rootMove> _res;
  -std::vector<rootMove> _previousRes;
}

MultiPVManager *-- "many" rootMove

'------------------------
'perft file
'------------------------

class Perft <<Unit_Tested>>{
  -Position & _pos;
}

Perft o-- Position
Perft o-- PerftTranspositionTable
Perft o-- MovePicker

'------------------------
'polyglotKey file
'------------------------

class PolyglotKey <<Unit_Tested>>{
  +uint64_t get(const Position& pos);
}

'------------------------
'position file
'------------------------

class Position <<Func_Tested>>{
  -const Movegen _mg;
  -pawnTable pawnHashTable;
  -std::vector<state> stateInfo;
  -std::array<bitboardIndex,squareNumber> squares;
  -std::array<bitMap,lastBitboard> bitBoard;
  -bitMap *Us;
  -bitmap *Them;
  
  -std::unordered_map<tKey, materialStruct> static materialKeyMap;
}

Position *-- Movegen
Position *-- pawnTable
Position *-- "many" state
Position o-- Move
Position *-- "many" materialStruct




class materialStruct <<Func_Tested>>{
}

'------------------------
'PVline file
'------------------------

class PVline <<Unit_Tested>>{
} 

PVline *-- Move

'------------------------
'PVlineFollower file
'------------------------

class PVlineFollower <<Unit_Tested>>{
  -PVline _line;
}

PVlineFollower *-- PVline

'------------------------
'rootMove file
'------------------------

class rootMove <<Func_Tested>>{
  +PVline PV;
  +Move firstMove;
  
}

rootMove *-- PVline
rootMove *-- Move

'------------------------
'search file
'------------------------

interface Search <<Func_Tested>>{
  -Search::impl pimpl;
}

class Search::impl <<Func_Tested>>{
  +{static} std::vector<impl> helperSearch;
  -std::unique_ptr<UciOutput> _UOI;
  -PVlineFollower _pvLineFollower;
  -SearchData _sd;
  -MultiPVManager _multiPVmanager;
  -Position _pos;
  -SearchLimits& _sl; // todo limits belong to threads
  -SearchTimer& _st;
  -std::vector<Move> _rootMovesToBeSearched;
  -std::vector<Move> _rootMovesAlreadySearched;
  -Game _game;
}

class voteSystem {
  -const std::vector<rootMove>& _results;
}

Search o-- Search::impl

Search::impl *-- UciOutput
Search::impl *-- PVlineFollower
Search::impl *-- SearchData
Search::impl *-- MultiPVManager
Search::impl *-- Position
Search::impl o-- SearchLimits
Search::impl o-- SearchTimer
Search::impl *-- Move
Search::impl *-- Game
Search::impl *-- voteSystem
Search::impl o-- SearchResult
Search::impl o-- transpositionTable
Search::impl o-- MovePicker
Search::impl o-- PolyglotBook

voteSystem o-- "many" rootMove

'------------------------
'searchData file
'------------------------

class SearchData <<Func_Tested>>{
  +Sd story[800];
  +CounterMove counterMoves;
  +CaptureHistory captureHistory;
  +History history;
}

class Sd <<Func_Tested>>{
  +Move excludeMove;
  +Move killers[2];
}

SearchData *-- "many" Sd
SearchData *-- CounterMove
SearchData *-- CaptureHistory
SearchData *-- History

Sd *-- Move

'------------------------
'searchLimits file
'------------------------

class SearchLimits <<Func_Tested>>{
  -long long int _wtime;
  -long long int _btime;
  -long long int _winc;
  -long long int _binc;
  -long long int _movesToGo;
  -long long int _mate;
  -long long int _moveTime;
  -unsigned int _nodes;
  -int _depth;
  -std::list<Move> _searchMoves;
  -bool _infinite;
  -volatile bool _ponder;
}

SearchLimits *-- "many" Move

'------------------------
'searchResult file
'------------------------

class SearchResult <<Func_Tested>>{
  +PVline PV;
}

SearchResult *-- PVline

'------------------------
'searchTimer file
'------------------------

class SearchTimer <<Unit_Tested>>{
  -std::chrono::time_point<std::chrono::steady_clock> startTime;
  -std::chrono::time_point<std::chrono::steady_clock> ponderTime;
}

'------------------------
'state file
'------------------------

class state <<Func_Tested>>{
  -eCastle _castleRights;
  -Move _currentMove;
  -bitMap _pinnedPieces;
  -bitMap _checkers;
  -eNextMove _nextMove;
  -bitMap _hiddenCheckersCandidate;
  -simdScore _material;
  -simdScore _nonPawnMaterial;
  -unsigned int _fiftyMoveCnt;
  -unsigned int _pliesFromNull;
  -bitMap _checkingSquares[lastBitboard];
  -bitboardIndex _capturedPiece;
  -tSquare _epSquare;
  -HashKey _key:
  -HashKey _pawnKey:
  -HashKey _materialKey;
}

state *-- Move
state *-- "3" HashKey

'------------------------
'tables file
'------------------------

class pawnEntry <<Func_Tested>>{
  +HashKey key;
  +bitMap weakPawns;
  +bitMap passedPawns;
  +bitMap pawnAttacks[2];
  +bitMap weakSquares[2];
  +bitMap holes[2];
  +Score res[2];
}

class pawnTable <<Func_Tested>>{
  +void insert(const HashKey& key,simdScore res,bitMap weak, bitMap passed,bitMap whiteAttack, bitMap blackAttack, bitMap weakSquareWhite,bitMap weakSquareBlack, bitMap whiteHoles, bitMap blackHoles);
  +pawnEntry& probe(const HashKey& key);
  
  -std::array<pawnEntry,size> _pawnTable;
}

pawnEntry *-- HashKey
pawnTable *-- "many" pawnEntry

'------------------------
'thread file
'------------------------

class my_thread <<Func_Tested>>{
  -my_thread::impl pimpl;
  +{static} my_thread& getInstance();
  +void startThinking( const Position& p, SearchLimits& l);
  +void stopThinking();
  +void ponderHit();
  +timeManagement& getTimeMan();
}

class my_thread::impl <<Func_Tested>>{
  -SearchLimits _limits; // todo limits belong to threads
  -SearchTimer _st;
  -Search _src;
  -timeManagement _timeMan;
  -std::unique_ptr<UciOutput> _UOI;

}

my_thread *-- my_thread::impl

my_thread::impl *-- SearchLimits
my_thread::impl *-- SearchTimer
my_thread::impl *-- Search
my_thread::impl *-- timeManagement
my_thread::impl *-- UciOutput

'------------------------
'timeManagement file
'------------------------

class timeManagement <<Unit_Tested>>{
  -bool _firstIterationFinished;
  -bool _idLoopIterationFinished;
  -bool _idLoopFailLow;
  -bool _idLoopFailOver;
	
  -long long _allocatedTime;
  -long long _minSearchTime;
  -long long _maxAllocatedTime;
  -unsigned int _resolution
  -bool _stop;
  -searchState _searchState;
  -const SearchLimits& _limits;
}

timeManagement o-- SearchLimits

'------------------------
'transposition file
'------------------------
class ttEntry <<Func_Tested>>{
}

class transpositionTable {
  -std::vector<ttEntry> _table;
  +{static} transpositionTable& getInstance();
}

class PerftTranspositionTable <<Func_Tested>>{
}

transpositionTable *-- "many" ttEntry
PerftTranspositionTable *-- transpositionTable

'------------------------
'uci Parameters file
'------------------------

class uciParameters <<Func_Tested>>{
}

@enduml